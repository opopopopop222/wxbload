document.getElementById("uploadForm").addEventListener("submit", async function (e) {
    e.preventDefault();

    const jsFile = document.getElementById("jsFile").files[0];
    const weaponFiles = Array.from(document.getElementById("weaponImages").files);
    const logoFiles = Array.from(document.getElementById("logoImages").files);
    const authFile = document.getElementById("authImage").files[0];

    if (!jsFile || !authFile) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã");
        return;
    }

    // üîê –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id —á–µ—Ä–µ–∑ prompt()
    const TELEGRAM_BOT_TOKEN = prompt("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Bot Token:");
    const TELEGRAM_CHAT_ID = prompt("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Chat ID:");

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
        alert("–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ Telegram Bot Token –∏ Chat ID");
        return;
    }

    const reader = new FileReader();
    reader.onload = async function () {
        let jsCode = reader.result;

        // üì¶ weapon: 0, 24, 25, 31
        const weaponUrls = {};
        for (const file of weaponFiles) {
            const key = file.name.replace(".png", "");
            if (["0", "24", "25", "31"].includes(key)) {
                const url = await uploadToTelegram(file, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID);
                if (url && url.endsWith(".jpg")) {
                    weaponUrls[key] = url.replace(".jpg", ".png");
                } else {
                    weaponUrls[key] = url;
                }
            }
        }

        // üéØ logo: 1‚Äì21
        const logoUrls = {};
        for (const file of logoFiles) {
            const key = file.name.replace(".png", "");
            if (key >= 1 && key <= 21) {
                const url = await uploadToTelegram(file, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID);
                if (url && url.endsWith(".jpg")) {
                    logoUrls[key] = url.replace(".jpg", ".png");
                } else {
                    logoUrls[key] = url;
                }
            }
        }

        // üîë winauth/auth.png
        let authUrl = "";
        if (authFile) {
            authUrl = await uploadToTelegram(authFile, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID);
            if (authUrl && authUrl.endsWith(".jpg")) {
                authUrl = authUrl.replace(".jpg", ".png");
            }
        }

        // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º JS-–∫–æ–¥
        jsCode = updateJsObject(jsCode, "weapon", weaponUrls);
        jsCode = updateJsObject(jsCode, "logo", logoUrls);

        // üñº –û–±–Ω–æ–≤–ª—è–µ–º background-image
        if (authUrl) {
            jsCode = updateBackgroundImageUrl(jsCode, authUrl);
        }

        // üìÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        const blob = new Blob([jsCode], { type: "text/plain" });
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = "mxzzxtrx.txt";
        link.textContent = "–°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª";
        document.getElementById("result").innerHTML = "";
        document.getElementById("result").appendChild(link);
    };

    reader.readAsText(jsFile);
});

// üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ Telegram
async function uploadToTelegram(file, token, chatId) {
    const formData = new FormData();
    formData.append("photo", file);
    formData.append("chat_id", chatId);

    try {
        const res = await fetch(`https://api.telegram.org/bot${token}/sendPhoto`, {
            method: "POST",
            body: formData,
        });

        const data = await res.json();
        if (data.ok) {
            const fileId = data.result.photo[0].file_id;
            const fileInfoRes = await fetch(`https://api.telegram.org/bot${token}/getFile?file_id=${fileId}`);
            const infoData = await fileInfoRes.json();
            const filePath = infoData.result.file_path;
            return `https://api.telegram.org/file/bot${token}/${filePath}`;
        } else {
            console.error("[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]", data.description);
            alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ Telegram");
        }
    } catch (err) {
        console.error("[–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegram]", err);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API");
    }

    return "";
}

// üß† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JS-–æ–±—ä–µ–∫—Ç–∞ (weapon –∏–ª–∏ logo)
function updateJsObject(code, objName, urlMapping) {
    const regex = new RegExp(`${objName}:\\s*{([^}]*)}`, 's');
    const match = code.match(regex);
    if (!match) return code;

    let content = match[0];
    let inner = content.slice(content.indexOf("{") + 1, content.lastIndexOf("}"));

    // –£–¥–∞–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤—Ä–æ–¥–µ "1"0"
    inner = inner.replace(/"[^"]+":\s*".*?",?\s*/g, (match) => {
        const fixedMatch = match.replace(/"/g, '');
        return fixedMatch;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏
    for (const key in urlMapping) {
        const value = urlMapping[key];
        const keyRegex = new RegExp(`"${key}"\\s*:\\s*"[^"]*"`, 'g');
        inner = inner.replace(keyRegex, `"${key}": "${value}"`);
    }

    // –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –æ–±—ä–µ–∫—Ç
    const newObj = `${objName}: {${inner}}`;
    return code.replace(regex, newObj);
}

// üñº –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ background-image –≤ —Å—Ç—Ä–æ–∫–µ 475
function updateBackgroundImageUrl(code, url) {
    const lines = code.split("\n");

    if (lines.length >= 475) {
        let line = lines[474]; // —Å—Ç—Ä–æ–∫–∞ 475 (–∏–Ω–¥–µ–∫—Å 474)

        // –ò—â–µ–º url() –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
        const match = line.match(/url\s*$([^)]*)$/);
        if (match) {
            line = line.replace(match[1], `"${url}"`);
            lines[474] = line;
            return lines.join("\n");
        }
    }

    return code;
}
